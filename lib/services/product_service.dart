import 'dart:convert';
import 'dart:io';
import 'package:app_ecommerce/models/products.dart';
import 'package:app_ecommerce/services/share_preference.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:http/http.dart' as http;

class ProductService {
  //t√¨m ki·∫øm s·∫£n ph·∫©m
  static Future<List<Product>> searchProducts(String query) async {
    // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n API l√† ch√≠nh x√°c: /api/products/search
    final url = Uri.parse('${dotenv.env['BASE_URL']}/products/search?q=$query');

    try {
      final response = await http.get(url);

      if (response.statusCode == 200) {
        final dynamic responseData = json.decode(response.body);

        // Tr∆∞·ªùng h·ª£p 1: API tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng c√≥ key 'products' (khi kh√¥ng t√¨m th·∫•y ho·∫∑c c√≥ th√¥ng b√°o)
        if (responseData is Map<String, dynamic> &&
            responseData.containsKey('products')) {
          final List<dynamic> productList = responseData['products'];
          return productList
              .map((json) => Product.fromJson(json as Map<String, dynamic>))
              .toList();
        }
        // Tr∆∞·ªùng h·ª£p 2: API tr·∫£ v·ªÅ tr·ª±c ti·∫øp m·ªôt danh s√°ch s·∫£n ph·∫©m (khi t√¨m th·∫•y s·∫£n ph·∫©m)
        else if (responseData is List) {
          return responseData
              .map((json) => Product.fromJson(json as Map<String, dynamic>))
              .toList();
        }
        // Tr∆∞·ªùng h·ª£p kh√¥ng mong mu·ªën (v√≠ d·ª•: response r·ªóng, ho·∫∑c ƒë·ªãnh d·∫°ng kh√°c)
        else {
          print(
            'Error: Unexpected response format for products search: ${response.body}',
          );
          // Tr·∫£ v·ªÅ m·ªôt danh s√°ch r·ªóng thay v√¨ n√©m Exception n·∫øu b·∫°n mu·ªën handle nh·∫π nh√†ng h∆°n
          return [];
        }
      } else {
        // X·ª≠ l√Ω l·ªói t·ª´ server (v√≠ d·ª•: status 400 n·∫øu thi·∫øu query, 500 server error)
        final errorData = json.decode(response.body);
        throw Exception(
          'Failed to search products: ${errorData['message'] ?? 'Status Code: ${response.statusCode}'}',
        );
      }
    } catch (e) {
      print('Error searching products: $e');
      throw Exception(
        'Failed to connect to the server or search products. Error: $e',
      );
    }
  }

  //L·∫•y danh s√°ch s·∫£n ph·∫©m theo categoryId

  static Future<List<Map<String, dynamic>>> fetchProducts(
    int categoryId,
  ) async {
    final url = Uri.parse(
      '${dotenv.env['BASE_URL']}/products/category/$categoryId',
    );
    final response = await http.get(url);

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body); // üëà c√≥ th·ªÉ l√† List<dynamic>
      return List<Map<String, dynamic>>.from(data); // ‚úÖ √âp ki·ªÉu ƒë√∫ng
    } else {
      throw Exception('Failed to load products');
    }
  }

  //L·∫•y danh s√°ch s·∫£n ph·∫©m n·ªïi b·∫≠t
  static Future<List<Product>> fetchFeaturedProducts() async {
    final url = Uri.parse('${dotenv.env['BASE_URL']}/products/featured');
    final res = await http.get(url);

    if (res.statusCode == 200) {
      final List<dynamic> jsonData = jsonDecode(res.body);
      print("DATA $jsonData");
      return jsonData
          .map((item) => Product.fromJson(item as Map<String, dynamic>))
          .toList();
    } else {
      throw Exception("Failed to load featured products: ${res.body}");
    }
  }

  //L·∫•y chi ti·∫øt s·∫£n ph·∫©m
  static Future<Map<String, dynamic>> fetchProductDetails(int productId) async {
    final response = await http.get(
      Uri.parse('${dotenv.env['BASE_URL']}/products/$productId'),
    );
    if (response.statusCode == 200) {
      return json.decode(response.body);
    } else {
      throw Exception('Failed to load product details');
    }
  }

  //L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m (c√≥ ph√¢n trang + l·ªçc theo category)
  static Future<List<Product>> fetchAllProducts() async {
    try {
      final url = '${dotenv.env['BASE_URL']}/products';
      final response = await http.get(Uri.parse(url));

      if (response.statusCode == 200) {
        final List<dynamic> jsonData = json.decode(response.body);
        print("DATA s·∫£n ph·∫©m: $jsonData");
        return jsonData
            .map((item) => Product.fromJson(item as Map<String, dynamic>))
            .toList();
      } else {
        print('‚ùå L·ªói khi fetch s·∫£n ph·∫©m: ${response.body}');
        return [];
      }
    } catch (e) {
      print('‚ùå L·ªói k·∫øt n·ªëi API: $e');
      return [];
    }
  }

  // ‚úÖ T·∫°o s·∫£n ph·∫©m
  static Future<void> createProduct(Map<String, dynamic> product) async {
    final token = await SharedPrefsHelper.getToken();
    final uri = Uri.parse('${dotenv.env['BASE_URL']}/products');

    try {
      http.Response response;

      if (product['image'] != null && File(product['image']).existsSync()) {
        final request =
            http.MultipartRequest('POST', uri)
              ..headers['Authorization'] = 'Bearer $token'
              ..fields['name'] = product['name']
              ..fields['price'] = product['price']
              ..fields['description'] = product['description'] ?? ''
              ..fields['category_id'] = product['category_id']?.toString() ?? ''
              ..fields['stock'] =
                  product['stock'].toString() ??
                  '' // ‚úÖ Chuy·ªÉn int th√†nh String cho fields
              ..fields['is_featured'] =
                  product['is_featured']?.toString() ?? '0'
              ..fields['seller_id'] = product['seller_id']?.toString() ?? '';

        request.files.add(
          await http.MultipartFile.fromPath('image', product['image']),
        );

        final streamedResponse = await request.send();
        response = await http.Response.fromStream(streamedResponse);
      } else {
        response = await http.post(
          uri,
          headers: {
            'Authorization': 'Bearer $token',
            'Content-Type': 'application/json',
          },
          body: jsonEncode({
            'name': product['name'],
            'price': product['price'],
            'description': product['description'] ?? '',
            'image': product['image'],
            'category_id': product['category_id'],
            'stock': product['stock'], // ‚úÖ S·ª≠ d·ª•ng tr·ª±c ti·∫øp int
            'is_featured': product['is_featured'],
            'seller_id': product['seller_id'],
          }),
        );
      }

      if (response.statusCode == 201) {
        print("‚úÖ Th√™m s·∫£n ph·∫©m th√†nh c√¥ng");
      } else {
        print("‚ùå L·ªói th√™m s·∫£n ph·∫©m: ${response.body}");
      }
    } catch (e) {
      print("‚ùå Exception khi th√™m s·∫£n ph·∫©m: $e");
    }
  }

  // ‚úÖ C·∫≠p nh·∫≠t s·∫£n ph·∫©m
  static Future<void> updateProduct(Map<String, dynamic> product) async {
    final token = await SharedPrefsHelper.getToken();
    final uri = Uri.parse(
      '${dotenv.env['BASE_URL']}/products/${product['id']}',
    );

    try {
      http.Response response;

      if (product['image'] != null && File(product['image']).existsSync()) {
        final request =
            http.MultipartRequest('PUT', uri)
              ..headers['Authorization'] = 'Bearer $token'
              ..fields['name'] = product['name']
              ..fields['price'] = product['price']
              ..fields['description'] = product['description'] ?? ''
              ..fields['category_id'] = product['category_id']?.toString() ?? ''
              ..fields['stock'] =
                  product['stock'] ??
                  0 // ‚úÖ ƒê√£ th√™m stock
              ..fields['is_featured'] =
                  product['is_featured']?.toString() ??
                  '0'; // ‚úÖ ƒê√£ th√™m is_featured

        request.files.add(
          await http.MultipartFile.fromPath('image', product['image']),
        );
        final streamedResponse = await request.send();
        response = await http.Response.fromStream(streamedResponse);
      } else {
        response = await http.put(
          uri,
          headers: {
            'Authorization': 'Bearer $token',
            'Content-Type': 'application/json',
          },
          body: jsonEncode({
            'name': product['name'],
            'price': product['price'],
            'description': product['description'] ?? '',
            'image': product['image'],
            'category_id': product['category_id'],
            'stock': product['stock'], // ‚úÖ ƒê√£ th√™m stock
            'is_featured': product['is_featured'], // ‚úÖ ƒê√£ th√™m is_featured
          }),
        );
      }

      if (response.statusCode == 200) {
        print("‚úÖ C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng");
      } else {
        print("‚ùå L·ªói c·∫≠p nh·∫≠t: ${response.body}");
      }
    } catch (e) {
      print("‚ùå Exception khi c·∫≠p nh·∫≠t: $e");
    }
  }

  // ‚úÖ X√≥a s·∫£n ph·∫©m
  static Future<void> deleteProduct(String id) async {
    final token = await SharedPrefsHelper.getToken();
    final uri = Uri.parse('${dotenv.env['BASE_URL']}/products/$id');

    try {
      final response = await http.delete(
        uri,
        headers: {'Authorization': 'Bearer $token'},
      );

      if (response.statusCode == 200) {
        print("‚úÖ X√≥a s·∫£n ph·∫©m th√†nh c√¥ng");
      } else {
        print("‚ùå L·ªói x√≥a s·∫£n ph·∫©m: ${response.body}");
      }
    } catch (e) {
      print("‚ùå Exception khi x√≥a s·∫£n ph·∫©m: $e");
    }
  }
}
