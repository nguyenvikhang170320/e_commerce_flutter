import 'dart:convert';

import 'package:app_ecommerce/models/cartItem.dart';
import 'package:app_ecommerce/providers/cart_provider.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:http/http.dart' as http;
import 'package:path/path.dart';
import 'package:provider/provider.dart';

class CartService {
  static bool _isAdding = false; // üõë C·ªù ki·ªÉm so√°t
  // ‚úÖ Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
  static Future<CartItem?> addToCart({
    required int productId,
    required int quantity,
    required double price,
    required String token,
  }) async {
    if (_isAdding) return null; // Prevent duplicate requests
    _isAdding = true;

    try {
      final url = Uri.parse("${dotenv.env['BASE_URL']}/carts");

      final response = await http.post(
        url,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode({
          'product_id': productId,
          'quantity': quantity,
          'price': price,
        }),
      );

      if (response.statusCode == 201) {
        final responseData = jsonDecode(response.body);

        if (responseData['success'] == true && responseData['data'] != null) {
          return CartItem.fromJson(responseData['data']);
        } else {
          print(
            '‚ùå Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng: ${responseData['error']}',
          );
          return null;
        }
      } else {
        print('‚ùå L·ªói khi th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng: ${response.body}');
        return null;
      }
    } catch (e) {
      print('‚ùå L·ªói m·∫°ng khi th√™m gi·ªè h√†ng: $e');
      return null;
    } finally {
      _isAdding = false;
    }
  }

  //t√¨m ki·∫øm s·∫£n ph·∫©m trong gi·ªè h√†ng
  static Future<List<CartItem>> searchCartItems(
    String query,
    String token, {
    int? userId,
  }) async {
    String urlString = '${dotenv.env['BASE_URL']}/carts/search?q=$query';

    // Th√™m userId v√†o query n·∫øu c√≥ v√† kh√¥ng ph·∫£i l√† customer
    // Logic n√†y s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω l·∫°i ·ªü backend ƒë·ªÉ ƒë·∫£m b·∫£o quy·ªÅn c·ªßa admin
    if (userId != null) {
      urlString += '&user_id=$userId';
      print("userId" + urlString);
    }

    final url = Uri.parse(urlString);
    print("Link $url");

    try {
      final response = await http.get(
        url,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
      );

      if (response.statusCode == 200) {
        final dynamic responseData = json.decode(response.body);

        // Tr∆∞·ªùng h·ª£p 1: API tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng c√≥ key 'cartItems' (khi kh√¥ng t√¨m th·∫•y ho·∫∑c c√≥ th√¥ng b√°o)
        if (responseData is Map<String, dynamic> &&
            responseData.containsKey('cartItems')) {
          final List<dynamic> cartItemList = responseData['cartItems'];
          return cartItemList
              .map((json) => CartItem.fromJson(json as Map<String, dynamic>))
              .toList();
        }
        // Tr∆∞·ªùng h·ª£p 2: API tr·∫£ v·ªÅ tr·ª±c ti·∫øp m·ªôt danh s√°ch s·∫£n ph·∫©m trong gi·ªè (khi t√¨m th·∫•y)
        else if (responseData is List) {
          return responseData
              .map((json) => CartItem.fromJson(json as Map<String, dynamic>))
              .toList();
        }
        // Tr∆∞·ªùng h·ª£p kh√¥ng mong mu·ªën
        else {
          print(
            'L·ªói: ƒê·ªãnh d·∫°ng ph·∫£n h·ªìi kh√¥ng mong mu·ªën cho t√¨m ki·∫øm gi·ªè h√†ng: ${response.body}',
          );
          return []; // Tr·∫£ v·ªÅ danh s√°ch r·ªóng
        }
      } else {
        // X·ª≠ l√Ω l·ªói t·ª´ server (v√≠ d·ª•: 400 Bad Request, 401 Unauthorized, 403 Forbidden)
        final errorData = json.decode(response.body);
        throw Exception(
          'Kh√¥ng t√¨m th·∫•y m·ª•c gi·ªè h√†ng: ${errorData['message'] ?? 'Status Code: ${response.statusCode}'}',
        );
      }
    } catch (e) {
      print('Error searching cart items: $e');
      throw Exception(
        'Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi m√°y ch·ªß ho·∫∑c t√¨m ki·∫øm c√°c m·ª•c trong gi·ªè h√†ng. L·ªói: $e',
      );
    }
  }

  // ‚úÖ L·∫•y danh s√°ch gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng t·ª´ token
  static Future<dynamic> fetchCart(String? token) async {
    if (token == null) {
      throw Exception("Token kh√¥ng h·ª£p l·ªá");
    }

    final url = Uri.parse('${dotenv.env['BASE_URL']}/carts');

    final response = await http.get(
      url,
      headers: {
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      },
    );

    if (response.statusCode == 200) {
      return jsonDecode(response.body);
    } else {
      print("‚ùå L·ªói khi l·∫•y gi·ªè h√†ng: ${response.statusCode}");
      throw Exception('Failed to load cart');
    }
  }

  /// ‚úÖ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m theo cartId
  static Future<void> updateQuantity({
    required int cartId,
    required int quantity,
    required String token,
  }) async {
    final url = Uri.parse('${dotenv.env['BASE_URL']}/carts/$cartId');

    final response = await http.put(
      url,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $token',
      },
      body: jsonEncode({'quantity': quantity}),
    );

    if (response.statusCode != 200) {
      print('‚ùå L·ªói c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng: ${response.body}');
      throw Exception('Failed to update quantity');
    }
  }

  /// ‚úÖ X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng theo cartId
  static Future<void> deleteCartItem({
    required int cartId,
    required String token,
  }) async {
    final url = Uri.parse('${dotenv.env['BASE_URL']}/carts/$cartId');

    final response = await http.delete(
      url,
      headers: {
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      },
    );

    if (response.statusCode != 200) {
      print('‚ùå L·ªói khi x√≥a s·∫£n ph·∫©m: ${response.body}');
      throw Exception('Failed to delete item');
    }
  }
}
